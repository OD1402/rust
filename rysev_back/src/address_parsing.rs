use regex::Regex;

pub fn address_normalization(address: String, source: String) -> String {
    // правила замены для Лайфделюкса
    let patterns_for_lifedeluxe = vec![
        (Regex::new(r"(?i)(^|\s)пр\.($|\s)").unwrap(), " проспект "),
        (Regex::new(r"(?i)(^|\s)прд\.($|\s)").unwrap(), " проезд "),
        (Regex::new(r"(?i)(^|\s)Адм\.($|\s)").unwrap(), " Адмирала "),
        (Regex::new(r"(?i)(^|\s)Проф\.($|\s)").unwrap(), " Профессора "),
    ];

    // правила замены для всех
    let patterns = vec![
        (Regex::new(r"(?i)-(я|й|ая|ый|ой|ий)\s").unwrap(), " "),

        (Regex::new(r"(?i)(.+)*(^|\s)(линия|просека|просек|спуск|промзона|зона|городок|заезд|тракт|проток|коса|губа|остров)($|\s)(.+)*").unwrap(), "$1 $5 $3"),
        //re:^([\d]{1,3}) ([^<>,]*?) линия|$1 линия $2

        (Regex::new(r"(?i)(^|\s)В\.\s?О\.($|\s)").unwrap(), " Васильевского острова "),
        (Regex::new(r"(?i)(^|\s)П\.\s?С\.($|\s)").unwrap(), " Петроградской стороны "),

        (Regex::new(r"(Васильевского острова)\s+(линия)").unwrap(), "$2 $1"),
        (Regex::new(r"(Петроградской стороны)\s+(линия)").unwrap(), "$2 $1"),

        // (Regex::new(r"(?i)(.+)*(^|\s)(ЖК|жилой комплекс)($|\s)(.+)*").unwrap(), "$1 $5 жилой комплекс "),
        
        (Regex::new(r"(?i)(.+)*(^|\s)(пер|переулок)\.?($|\s)(.+)*").unwrap(), "$1 $5 переулок "),
        (Regex::new(r"(?i)(.+)*(^|\s)(алл|ал|аллея)\.?($|\s)(.+)*").unwrap(), "$1 $5 аллея "),
        (
            Regex::new(r"(?i)(.+)*(^|\s)(пр-д|пр-зд|пр|проезд)\.?($|\s)(.+)*").unwrap(),
            "$1 $5 проезд ",
        ),
        (
            Regex::new(r"(?i)(.+)*(^|\s)(бул|б-р|бульвар)\.?($|\s)(.+)*").unwrap(),
            "$1 $5 бульвар ",
        ),

        (Regex::new(r"(?i)(.+)*(^|\s)(кан\. наб\.)($|\s)(.+)*").unwrap(), "$1 $4 канала набережная "),
        (Regex::new(r"(?i)(.+)*(^|\s)кан\.? набережная").unwrap(), " канала набережная "),

        (Regex::new(r"(?i)(.+)*(^|\s)(канала)( .+)*").unwrap(), "$1 $4 канала"),
        (Regex::new(r"(?i)(.+)*(^|\s)(реки)( .+)*").unwrap(), "$1 $4 реки"),

        (Regex::new(r"(?i)(.+)*(^|\s)(наб|набережная)\.?($|\s)(.+)*").unwrap(), "$1 $5 набережная "),
        (Regex::new(r"(?i)(.+)*(^|\s)(кан|канал)\.?($|\s)(.+)*").unwrap(), "$1 $5 канал "),

        (Regex::new(r"(?i)(.+)*(^|\s)(пл|площадь)\.?($|\s)(.+)*").unwrap(), "$1 $5 площадь "),
        (
            Regex::new(r"(?i)(.+)*(^|\s)(просп|пр-кт|пр-т|проспект)\.?($|\s)(.+)*").unwrap(),
            "$1 $5 проспект ",
        ),
        (Regex::new(r"(?i)(.+)*(^|\s)(туп|тупик)\.?($|\s)(.+)*").unwrap(), "$1 $5 тупик "),
        (Regex::new(r"(?i)(.+)*(^|\s)(ш|шос|шоссе)\.?($|\s)(.+)*").unwrap(), "$1 $5 шоссе "),
        (Regex::new(r"(?i)(.+)*(^|\s)(дор|дорога)\.?($|\s)(.+)*").unwrap(), "$1 $5 дорога "),
        (
            Regex::new(r"(?i)(.+)*(^|\s)(мкр|мкрн|мкр-н|м-н|микрорайон)\.?($|\s)(.+)*").unwrap(),
            "$1 $5 микрорайон ",
        ),
        (Regex::new(r"(?i)(.+)*(^|\s)(жилой квартал|жил\. кв-л)\.?($|\s)(.+)*").unwrap(), "$1 $5 жилой квартал "),
        (
            Regex::new(r"(?i)(.+)*(^|\s)(кв-л|квл|квартал)\.?($|\s)(.+)*").unwrap(),
            "$1 $5 квартал ",
        ),
        // (Regex::new(r"(?i)(^|\s)ул\.?($|\s)").unwrap(), " улица "),
        (Regex::new(r"(?i)(.+)*(^|\s)(ул|улица)\.?($|\s)(.+)*").unwrap(), "$1 $5 улица "),
        (Regex::new(r"(?i)(.+)*(^|\s)(ЖК|жилой комплекс)($|\s)(.+)*").unwrap(), "$1 $5 жилой комплекс "),

        (Regex::new(r"(?i)(.+)*(^|\s)(тер|территория)\.?($|\s)(.+)*").unwrap(), "$1 $5 территория "),
        (Regex::new(r"(?i)(.+)*(^|\s)(муниципальный округ)\.?($|\s)(.+)*").unwrap(), "$1 $5 $3 "),
        (Regex::new(r"(?i)(.+)*(^|\s)(округ)\.?($|\s)(.+)*").unwrap(), "$1 $5 $3 "),

        (Regex::new(r"(?i)(^|\s)(г|гор)\.?($|\s)").unwrap(), " "),
        (Regex::new(r"(?i)(^|\s)(п|пос|посёлок|поселок)\.?($|\s)").unwrap(), " "),
        (Regex::new(r"(?i)(Колпино|Красное Село|Кронштадт|Зеленогорск|Сестрорецк|Ломоносов|Петергоф|Павловск|Пушкин|Левашово|Парголово|Понтонный|Усть-Ижора|Петро-Славянка|Сапёрный|Металлострой|Белоостров|Комарово|Молодёжное|Песочный|Репино|Серово|Смолячково|Солнечное|Ушково|Стрельна|Лисий Нос|Шушары|Александровская|Тярлево) микрорайон").unwrap(), "$1"),
        (Regex::new(r"(?i)^(Колпино|Красное Село|Кронштадт|Зеленогорск|Сестрорецк|Ломоносов|Петергоф|Павловск|Пушкин)$").unwrap(), "$1 город"),
        (Regex::new(r"(?i)^(Левашово|Парголово|Понтонный|Усть-Ижора|Петро-Славянка|Сапёрный|Металлострой|Белоостров|Комарово|Молодёжное|Песочный|Репино|Серово|Смолячково|Солнечное|Ушково|Стрельна|Лисий Нос|Шушары|Александровская|Тярлево)$").unwrap(), "$1 поселок"),

        (Regex::new(r"(?i)^(д\.)\s?(\d(.+)?)").unwrap(), " $2"),
        (Regex::new(r"\s{2,}").unwrap(), " "),
    ];

    let mut updated_address = address;

    // println!("updated_address start {}", &updated_address);

    // перед номером дома может не быть запятой, поставим ее
    // "Петроградский проспект 11 к3"
    let rx_no_comma_1 = Regex::new(r"(?i)(.+(линия|аллея|улица|бульвар|набережная|переулок|площадь|проезд|проспект|тупик|шоссе|дорога|просека|просек|микрорайон|территория|квартал|промзона|зона|городок|заезд|съезд|спуск|тракт|проток|канал|коса|ул\.|алл\.|наб\.|пр\.))( \d+)").unwrap();
    let rx_no_comma_2 = Regex::new(r"(?i)\d+-[а-я]").unwrap();

    if rx_no_comma_1.is_match(&updated_address) && !rx_no_comma_2.is_match(&updated_address) {
        updated_address = rx_no_comma_1.replace(&updated_address, "$1,$3").to_string();
    }

    // let mut collect_updated_address: Vec<String> = updated_address
    //     .split(",")
    //     .map(|s| s.trim().to_string())
    //     .collect();

    let rx_split = Regex::new(r",| \/ ").unwrap();

    // Использование регулярного выражения для разделения строки
    let mut collect_updated_address: Vec<String> = rx_split.split(&updated_address)
        .map(|s| s.trim().to_string())
        .filter(|s| !s.is_empty()) // пустые строки
        .collect();


    // [ЖК «Черная речка, 41»] - такие названия не надо разбивать на несколько элементов, склеим их обратно
    // см тест "ЖК «Черная речка, 41»"
    if let Some(index) = collect_updated_address
        .iter()
        .position(|s| s.contains('«') && !s.contains('»'))
    {
        let new_item =
            collect_updated_address[index].clone() + ", " + &collect_updated_address[index + 1];

        collect_updated_address.remove(index + 1);
        collect_updated_address.remove(index);
        collect_updated_address.insert(index, new_item.clone());
    }

    // удалим лишние элементы
    {
        let rx_unnece_1 =
            Regex::new(r"(?i)р-н|(\s|^)(район|Санкт-Петербург|Россия)(\s|$)").unwrap();
        collect_updated_address.retain(|item| !rx_unnece_1.is_match(item));

        if collect_updated_address.len() > 1 {
            let rx_unnece_2 = Regex::new(r"(?i)(\s|^)округ(\s|$)").unwrap();
            if rx_unnece_2.is_match(&collect_updated_address[0]) {
                collect_updated_address.remove(0);
            }
        }

        // external_address "Санкт-Петербург, р-н Выборгский,  15, улица Кустодиева, 7к1"
        // external_address "г., Бакунина ул. 33" - в таком виде приходит от Лайфделюкса - названия города нет, а "г" есть
        if collect_updated_address.len() > 1 {
            let rx_unnece_2 = Regex::new(r"^([0-9]+|г\.)$").unwrap();
            if rx_unnece_2.is_match(&collect_updated_address[0]) {
                collect_updated_address.remove(0);
            }
        }
    }

    // println!("collect_updated_address 000 {:#?}", &collect_updated_address);

    // развернем сокращения, перенесем тип улицы в конец после названия
    collect_updated_address = collect_updated_address
        .into_iter()
        .map(|mut item| {
            if source == "D" {
                for (regex, replacement) in patterns_for_lifedeluxe.clone() {
                    item = regex.replace_all(&item, replacement).trim().to_string();
                }
            }
            for (regex, replacement) in patterns.clone() {
                item = regex.replace_all(&item, replacement).trim().to_string();
            }
            item
        })
        .collect();

    // println!(
    //     "collect_updated_address 111 {:#?}",
    //     &collect_updated_address
    // );

    // удалим внутригородские территории, микрорайоны и нас.пункты
    {
        let rx_street = Regex::new(
            r"(?i)(\s|^)(линия|аллея|улица|бульвар|набережная|переулок|площадь|проезд|проспект|тупик|шоссе|дорога|просека|просек|спуск|микрорайон|территория|квартал|промзона|зона|городок|заезд|тракт|проток|канал|коса|губа|жилой комплекс)($|\s)"
        ).unwrap();

        let rx_street_without_mcr = Regex::new(
            r"(?i)(\s|^)(линия|аллея|улица|бульвар|набережная|переулок|площадь|проезд|проспект|тупик|шоссе|дорога|просека|просек|спуск|заезд|тракт|проток|канал)($|\s)"
        ).unwrap();

        let rx_place = Regex::new(
            r"(?i)(\s|^)(поселок|деревня)($|\s)"
        ).unwrap();

        let rx_building = Regex::new(
            r"(?i)^\d+$"
        ).unwrap();


        // удаляем территории указанные перед улицей
        if collect_updated_address.len() > 1
            && !rx_street.is_match(&collect_updated_address[0])
            && !Regex::new(r"«") // там может быть название ЖК, но не "ЖК" а "МФК" например
                .unwrap()
                .is_match(&collect_updated_address[0])
        {
            if rx_place.is_match(&collect_updated_address[0]) && rx_building.is_match(&collect_updated_address[1]) {
                // println!(
                //     "collect_updated_address 222 {:#?}",
                //     &collect_updated_address
                // );
            } else {
                collect_updated_address.remove(0);
            }
        }

        // println!(
        //     "collect_updated_address 333 {:#?}",
        //     &collect_updated_address
        // );

        if collect_updated_address.len() > 1
            && rx_street_without_mcr.is_match(&collect_updated_address[0])
        {
            // "Графова улица",
            // "«Черная Речка, 41» жилой комплекс",
            if Regex::new(r"жилой комплекс")
                .unwrap()
                .is_match(&collect_updated_address[1])
                || Regex::new(r"«")
                    .unwrap()
                    .is_match(&collect_updated_address[1])
            {
                collect_updated_address.remove(1); // хотят, чтобы осталась улица
            }
        }

        if collect_updated_address.len() > 1 && rx_street.is_match(&collect_updated_address[1]) {
            collect_updated_address.remove(0);
        }

        if collect_updated_address.len() > 1
            && rx_street_without_mcr.is_match(&collect_updated_address[0])
        {
            // "Какая-то улица",
            // "«Черная Речка, 41» жилой комплекс",
            if Regex::new(r"жилой комплекс")
                .unwrap()
                .is_match(&collect_updated_address[1])
                || Regex::new(r"«")
                    .unwrap()
                    .is_match(&collect_updated_address[1])
            {
                collect_updated_address.remove(1); // хотят, чтобы осталась улица
            }
        }
    }

    // "ул. Зеленина улица"
    // "ул. Какой-то проспект"
    {
        if collect_updated_address.len() > 0 {
            let rx_double_street = Regex::new(r"(?i)^(ул\.)").unwrap();
            collect_updated_address[0] = rx_double_street
                .replace(&collect_updated_address[0], "")
                .trim()
                .to_owned();
        }
    }

    // println!(
    //     "collect_updated_address 222 {:#?}",
    //     &collect_updated_address
    // );

    updated_address = collect_updated_address.join(", ");

    // развернем сокращения "М." и "Б."
    {
        let rx_b = Regex::new(r"(?i)(^|\s)Б\.").unwrap();
        let rx_m = Regex::new(r"(?i)(^|\s)М\.").unwrap();

        let rx_b_male = Regex::new(r"(?i) (пр|пер|туп|бул|микр|квартал|спуск|съезд)").unwrap();
        let rx_b_female = Regex::new(r"(?i) (ул|алл|наб|пл|дор|тер)").unwrap();

        let rx_m_male = Regex::new(r"(?i) (пр|пер|туп|бул|микр|квартал|спуск|съезд)").unwrap();
        let rx_m_female = Regex::new(r"(?i) (ул|алл|наб|пл|дор|тер)").unwrap();

        if rx_b.is_match(&updated_address) {
            match true {
                _ if rx_b_male.is_match(&updated_address) => {
                    updated_address = rx_b
                        .replace_all(&updated_address, " Большой")
                        .trim()
                        .to_owned();
                }
                _ if rx_b_female.is_match(&updated_address) => {
                    updated_address = rx_b
                        .replace_all(&updated_address, " Большая")
                        .trim()
                        .to_owned();
                }
                _ => {}
            }
        } else if rx_m.is_match(&updated_address) {
            match true {
                _ if rx_m_male.is_match(&updated_address) => {
                    updated_address = rx_m
                        .replace_all(&updated_address, " Малый")
                        .trim()
                        .to_owned();
                }
                _ if rx_m_female.is_match(&updated_address) => {
                    updated_address = rx_m
                        .replace_all(&updated_address, " Малая")
                        .trim()
                        .to_owned();
                }
                _ => {}
            }
        }
    }

    // println!("updated_address m-b {:#?}", &updated_address);

    // нормализация домов
    {
        updated_address = Regex::new(r"(\d+)(,?\s(стр|c)(\.\s|\.|\s))(.+)")
            .unwrap()
            .replace(&updated_address, "$1с$5")
            .to_string();
        updated_address = Regex::new(r"(\d+),?\s?(стр|с)(\d+)")
            .unwrap()
            .replace(&updated_address, "$1с$3")
            .to_string();
        updated_address = Regex::new(r"(\d+)(,?\s(корп|к)(\.\s|\.|\s))(.+)")
            .unwrap()
            .replace(&updated_address, "$1к$5")
            .to_string();
        updated_address = Regex::new(r"(\d+),?\s?(корп|к)(\d+)")
            .unwrap()
            .replace(&updated_address, "$1к$3")
            .to_string();
        updated_address = Regex::new(r"(\d+)(,?\s(лит|литер|литера)(\.\s|\.|\s))(.+)")
            .unwrap()
            .replace(&updated_address, "$1лит$5")
            .to_string();
        updated_address = Regex::new(r"(\d+[а-я])(,?\s(лит|литер|литера)(\.\s|\.|\s))(.+)")
            .unwrap()
            .replace(&updated_address, "$1 лит$5")
            .to_string();

        updated_address = updated_address
            .replace(" стр. ", " с")
            .replace(" к. ", " к")
            .replace(" корп. ", " к")
            .replace(" лит. ", " лит")
            .replace(" литер ", " лит")
            .replace(" литера ", " лит")
            .replace(" уч.", " участок")
            .replace(" оч.", " очередь")
            .replace("«", "")
            .replace("»", "");
    }

    // println!("updated_address finish {:#?}", &updated_address);
    // println!("============================");

    updated_address
}

///////////////////////////////

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_address_normalization_street() {
        // !!!!!!!!!!!!!!!
        // ЛАЙФДЕЛЮКС - добавить тесты с городами

        let result = address_normalization("Невский пр., д.18".to_string(), "D".to_string());
        assert_eq!(result, "Невский проспект, 18");

        let result = address_normalization("Большой П.С. пр., д.98".to_string(), "D".to_string());
        assert_eq!(result, "Большой Петроградской стороны проспект, 98");

        let result = address_normalization("г., Большой пр. В.О., 67".to_string(), "D".to_string());
        assert_eq!(result, "Большой Васильевского острова проспект, 67");

        let result = address_normalization("Проф. Попова ул., д.41/5".to_string(), "D".to_string());
        assert_eq!(result, "Профессора Попова улица, 41/5");

        let test_cases = vec![
            (
                "Санкт-Петербург, ул. Среднерогатская / пр. Дунайский / ш. Пулковское",
                "Дунайский проезд, Пулковское шоссе",
            ),
            (
                "Санкт-Петербург, г. Пушкин, 2 оч., стр. 3",
                "2 очередь, с3",
            ),
            (
                "Санкт-Петербург, ш. Пулковское, уч. 2",
                "Пулковское шоссе, участок 2",
            ),
            (
                "Санкт-Петербург, линия 12-я В.О., д. 41, лит. Ж, корп. 1",
                "12 линия Васильевского острова, 41литЖ, к1",
            ),
            (
                "Санкт-Петербург, ул. Зеленина улица, д. 4, лит. А",
                "Зеленина улица, 4литА",
            ),
            (
                "Санкт-Петербург, ул. 3-я Конная Лахта, уч. 9, стр. 6",
                "3 Конная Лахта улица, участок 9с6",
            ),
            ("ул. Пушкина, д. 12", "Пушкина улица, 12"),
            ("улица Пушкина, д. 12", "Пушкина улица, 12"),
            ("Пушкина ул., д.45", "Пушкина улица, 45"),
            ("Пушкина ул.", "Пушкина улица"),
            ("Пушкина ул", "Пушкина улица"),
            ("Пушкина улица, д.45", "Пушкина улица, 45"),
            ("Пушкина улица", "Пушкина улица"),
            //
            ("мкрн. Пушкина, д. 12", "Пушкина микрорайон, 12"),
            ("микрорайон. Пушкина, д. 12", "Пушкина микрорайон, 12"),
            ("Пушкина мкрн., д.45", "Пушкина микрорайон, 45"),
            ("Пушкина мкрн, д.45", "Пушкина микрорайон, 45"),
            ("Пушкина мкрн.", "Пушкина микрорайон"),
            ("Пушкина мкрн", "Пушкина микрорайон"),
            //
            ("16-я линия Васильевского острова, 79", "16 линия Васильевского острова, 79"),
            ("16-я Васильевского острова линия, 79", "16 линия Васильевского острова, 79"),
            // ("Васильевского острова 16-я линия, 79", "16 линия Васильевского острова, 79"),
            ("16-я линия В. О., 79", "16 линия Васильевского острова, 79"),
            ("16-я В.О. линия, 79", "16 линия Васильевского острова, 79"),

            //Большой пр. В.О., 67

            //("г., Бакунина ул. 33", "Бакунина улица 33"),
            ("Б. Посадская ул., д.9/5Б", "Большая Посадская улица, 9/5Б"),
            (
                "Б. Сампсониевский просп, д.74",
                "Большой Сампсониевский проспект, 74",
            ),
            ("М. Зеленина ул., д.4", "Малая Зеленина улица, 4"),
            ("М. Блюхера проспект., д.7", "Малый Блюхера проспект, 7"),
            //
            (
                "Грибоедова кан. наб., 29",
                "Грибоедова канала набережная, 29",
            ),
            (
                "г., Грибоедова канала наб., 15",
                "Грибоедова канала набережная, 15",
            ),
            (
                "Канала Грибоедова наб., д.10",
                "Грибоедова канала набережная, 10",
            ),
            (
                "набережная Канала Грибоедова, д.10",
                "Грибоедова канала набережная, 10",
            ),
            (
                "Реки Малой Невки наб., д.33А",
                "Малой Невки реки набережная, 33А",
            ),
            ("13-я линия, д.50", "13 линия, 50"),
            //
            // примеры из ЦИАНа
            (
                "Санкт-Петербург, р-н Центральный, Смольнинское, 4-я Советская улица, 45-47",
                "4 Советская улица, 45-47",
            ),
            (
                "Санкт-Петербург, р-н Пушкинский, мкр. Пушкин, Октябрьский бульвар, 8к2",
                "Октябрьский бульвар, 8к2",
            ),
            (
                "Санкт-Петербург, р-н Красносельский, Южно-Приморский, проспект Героев, 31",
                "Героев проспект, 31",
            ),
            (
                "Санкт-Петербург, р-н Петроградский, Аптекарский остров, набережная Реки Карповки, 27",
                "Карповки реки набережная, 27",
            ),
            (
                "Санкт-Петербург, р-н Адмиралтейский, Измайловское, Лермонтовский 54 ЖК, к 2.1",
                "Лермонтовский 54 жилой комплекс, к 2.1",
            ),
            (
                "Санкт-Петербург, р-н Выборгский, Сампсониевское, ЖК «Сампсониевский 32»",
                "Сампсониевский 32 жилой комплекс",
            ),
            (
                "Санкт-Петербург, р-н Василеостровский,  7, Империал Клаб ЖК",
                "Империал Клаб жилой комплекс",
            ),
            (
                "Санкт-Петербург, р-н Василеостровский, Гавань, Кожевенная линия, ЖК «LEGENDA Васильевского»",
                "Кожевенная линия",
            ),
            (
                "Санкт-Петербург, р-н Приморский, Чёрная речка, Ланское муниципальный округ, ЖК «Черная речка, 41»",
                "Черная речка, 41 жилой комплекс",
            ),
            (
                "Санкт-Петербург, р-н Центральный, Лиговка-Ямская, Миргородская улица, 20",
                "Миргородская улица, 20",
            ),
            (
                "Санкт-Петербург, р-н Курортный, мкр. Зеленогорск, ЖК «Ранта Резиденс»",
                "Ранта Резиденс жилой комплекс",
            ),
            (
                "Санкт-Петербург, р-н Пушкинский, мкр. Пушкин, Ляминский переулок, ЖК «VI Квартал»",
                "Ляминский переулок",
            ),
            (
                "Санкт-Петербург, р-н Василеостровский, Гавань, Морская Набережная ЖК",
                "Морская набережная жилой комплекс",
            ),
            (
                "Санкт-Петербург, р-н Василеостровский, Морской, Невская Губа тер., ЖК «GloraX Premium Василеостровский»",
                "GloraX Premium Василеостровский жилой комплекс",
            ),
            (
                "Санкт-Петербург, р-н Выборгский, мкр. Парголово, Парнас, дорога Ольгинская, ЖК «Прагма city»",
                "Ольгинская дорога",
            ),
            //
            // примеры из ЯНДЕКСа
            (
                "Россия, Санкт-Петербург, улица Рылеева, 3",
                "Рылеева улица, 3",
            ),
            (
                "Россия, Санкт-Петербург, 16-я линия Васильевского острова, 79",
                "16 линия Васильевского острова, 79",
            ),
            (
                "Россия, Санкт-Петербург, Невский район, муниципальный округ  54, ЖК «Цивилизация на Неве»",
                "Цивилизация на Неве жилой комплекс",
            ),
            (
                "Россия, Санкт-Петербург, Петроградский район, муниципальный округ Чкаловское, жилой комплекс Авант",
                "Авант жилой комплекс",
            ),(
                "Россия, Санкт-Петербург, Партизанская улица, ЖК «ЛСР. Большая Охта»",
                "Партизанская улица",
            ),(
                "Россия, Санкт-Петербург, коса Петровская, 1к2",
                "Петровская коса, 1к2",
            ),
            (
                "Россия, Санкт-Петербург, Масляный канал, ЖК Imperial Club",
                "Масляный канал",
            ),
            (
                "Россия, Санкт-Петербург, Зеленогорск, ЖК Ranta Residence",
                "Ranta Residence жилой комплекс",
            ),
            (
                "Россия, Санкт-Петербург, территория Полюстрово, жилой квартал Б15",
                "Б15 жилой квартал",
            ),

            //
            // примеры из АВИТО
            (
                "ул. Шкиперский проток, д. 19, лит. А",
                "Шкиперский проток улица, 19литА",
            ),(
                "наб. Чёрной речки, ЖК «Лисичанская, 22»",
                "Чёрной речки набережная",
            ), (
                "губа Невская, уч. 14, стр. 12.1.4",
                "Невская губа, участок 14с12.1.4",
            ), (
                "Невская губа, уч. 14, стр. 12.1.4",
                "Невская губа, участок 14с12.1.4",
            ), (
                "остров Декабристов",
                "Декабристов остров",
            ), (
                "ул. Масляный канал, стр. 1.1",
                "Масляный канал улица, с1.1",
            ), 
            (
                "Невская губа, кв-л 10, уч. 12, стр. 5",
                "10 квартал, участок 12с5", // спорно...
            ),
            (
                "Невская Губа, д. 2, стр. 1",
                "Невская Губа, 2с1",
            ),
            (
                "Невская Губа, уч. 14, блок 12.2.1",
                "Невская Губа, участок 14, блок 12.2.1",
            ),
            (
                "ул. Егорова, д. 23б, лит. А",
                "Егорова улица, 23б литА",
            ), 
            // (
            //     "ул. Зеленина улица, д. 4, лит. А",
            //     "ул. Зеленина улица, д. 4, лит. А",
            // ),
            
            // у Лайфделюкса встречаются варианты без запятой
            (
                "Петроградский проспект 11 к3",
                "Петроградский проспект, 11к3",
            ),
            (
                "г., Бакунина ул. 33",
                "Бакунина улица, 33",
            ),
            ////
            (
                "Санкт-Петербург, Приморский район, муниципальный округ Ланское",
                "Ланское муниципальный округ",
            ),
            (
                "Санкт-Петербург, р-н Пушкинский, мкр. Александровская, 15",
                "Александровская поселок, 15",
            ),
        ];

        for (addr, expected) in test_cases {
            let result = address_normalization(addr.to_string(), "source".to_string());
            assert_eq!(result, expected);
        }
    }

    #[test]
    fn test_address_normalization_building() {
        let test_cases = vec![
            ("Первый пер., 5, стр. 1", "Первый переулок, 5с1"),
            ("Первый пер., 5 стр. 1", "Первый переулок, 5с1"),
            ("Первый пер., 5, стр 1", "Первый переулок, 5с1"),
            ("Первый пер., 5, стр1", "Первый переулок, 5с1"),
            ("Первый пер., 5стр1", "Первый переулок, 5с1"),
            // ("Первый пер., 5, с. 1", "Первый переулок, 5с1"),
            // ("Первый пер., 5 с. 1", "Первый переулок, 5с1"),
            // ("Первый пер., 5 с 1", "Первый переулок, 5с1"),
            // ("Первый пер., 5с.1", "Первый переулок, 5с1"),
            ("Первый пер., 5с1", "Первый переулок, 5с1"),
            //
            ("Первый пер., 5, корп. 1", "Первый переулок, 5к1"),
            ("Первый пер., 5 корп. 1", "Первый переулок, 5к1"),
            ("Первый пер., 5 корп.1", "Первый переулок, 5к1"),
            ("Первый пер., 5, к. 1", "Первый переулок, 5к1"),
            ("Первый пер., 5 к. 1", "Первый переулок, 5к1"),
            ("Первый пер., 5 к.1", "Первый переулок, 5к1"),
            ("Первый пер., 5 к1", "Первый переулок, 5к1"),
            ("Первый пер., 11, к. 1, стр. 5", "Первый переулок, 11к1с5"),
            ("Первый пер., 11, к. 1с5", "Первый переулок, 11к1с5"),
            ("Первый пер., 183-185Ак1", "Первый переулок, 183-185Ак1"),
        ];

        for (addr, expected) in test_cases {
            let result = address_normalization(addr.to_string(), "source".to_string());
            assert_eq!(result, expected);
        }
    }
}
